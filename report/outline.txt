Hardware Accelerator for Fast Regular Expression Matching
=========================================================

## Introduction
* Dark-silicon era
  + With scaling, more number of transistors being integrated
  + Powering these many transistors a concern, approaching a dark-silicon era
  + Will not be able to power all the devices on a SoC; specialized accelerators create a value out of these dark portions of the chip

* Why accelerator for string matching?
* Out goal - Exploit available DDR bandwidth and why?
* Challenges
* Contributions

## Design Objectives

## Background
* What is DFA?
  + Define Aho-Corasick algorithm
  + Define the tuple and what each parameter mean
* What is BitSplit automata
  + Define why is it important
  + How does it work? Discuss bitsplit machines and reduction logic
* Our Design overview
  + Discuss how strings are split
  + How alignment is implemented by considering all W patterns
  + How split strings are merged in the second stage
  
## Our Architecture
* Compiler
  + How are the patterns split and compiled
  + The components are generated so that no component is a prefix of another, this is to ensure that no patterns match at the same location.
  + The components are then compiled for different alignments and state transitions are stored in the first stage.
  + Each actual regex pattern is then annotated with the component number. This pattern actually signifies the patterns to be detected by the second stage
  + How different regular expressions are handled
    - Alternation, question mark, and other such optional regex are handled by calculating all the possible strings
    - Kleen Star patterns produce two patterns - one with the character repeating one of more times (+) and the other with the character absent.
    - Repeating patterns are accounted only once and the corresponding count variable is updated to indicate the desired count.
    - In case of groups repeating fixed number of times, the min and max counts are updated and the range is generated in the format similar to character classes.
  + Different optimizations in the compiler

* Hardware
 * BitSplit machines Stage 1
  + How strings are split and mapped to the PMVs
  + How character classes are identified and input to the bitsplit machines
 * Coalescer
  + How are the output patterns merged by the coalescer and how the pattern and count fields are generated
  + How are the boundary bits handled
  + How the one hot patterns are then encoded and fed to the second stage
 * BitSplit machines Stage 2
  + The patterns and counts from coalescer are fed to the second stage
  + The patterns are complied and searched in the manner similar to the first stage
  + The count is implemented similar to character classes with range of counts implemented similar to the range memory in cclasses.

* What happens when patterns overlap or we run out of PMV bits?
  + Divide accelerator into two parts and match the patterns separately at lower throughput.
  + Compiler determines if the patterns are overlapping and creates groups

## Results

## Conclusion
