\documentclass[]{sig-alternate}
%\usepackage{latex8}
%\usepackage{times}
\usepackage{alltt}
%to get bold font inside alltt environment - Biruk
\renewcommand{\ttdefault}{txtt}

\usepackage{amsmath}
\usepackage{blindtext}
\usepackage{graphicx}
\usepackage[font=small]{caption,subfig}
\usepackage{placeins}
\usepackage{listings}
\graphicspath{{./fig/}}

\usepackage[usenames]{color}
\usepackage{lipsum}% http://ctan.org/pkg/lipsum
\usepackage{multicol}% http://ctan.org/pkg/multicols
%\pagestyle{empty}

%%to fix indentation of enumerated lists
\let\labelindent\relax
\usepackage{enumitem} 
\usepackage{algorithm} 
\usepackage{algpseudocode}
\usepackage[noadjust]{cite}

\usepackage{multirow}
%%% Spacing Stuff
%\newcommand{\figVspaceBefore}{\vspace{0mm}}
%\newcommand{\figVspaceBetween}{\vspace{0mm}}
%\newcommand{\figVspaceAfter}{\vspace{0mm}}
%\topsep 0in \itemsep 0in        % No extra space in itemized lists

%%% misc commands
\newcommand{\eg}{{\it e.g.}\thinspace}
%\newcommand{\ie}{{\it i.e.}\thinspace}
\newcommand{\ie}{{\it i.e.}\thinspace}
\newcommand{\etc}{{\it etc.}\thinspace}
\newcommand{\etal}{{\it et al.}\thinspace}

\newcommand{\note}[1]{\textcolor{red}{\it NOTE: #1}}
\newcommand{\hilite}[1]{\textcolor{blue}{#1}}
\newcommand{\change}[1]{\textcolor{red}{\textbf{\textit{#1}} }}
%\newcommand{\change}[1]{\hl{#1}}
\newcommand{\squeezelist}{
  \setlength{\topsep}{0pt}
  \setlength{\parskip}{0pt}
  \setlength{\partopsep}{0pt}
  \setlength{\parsep}{0pt}
  \setlength{\itemsep}{0pt}
}
 
%% Spacing Stuff
\newcommand{\figVspaceStart}{\vspace{-2mm}}
\newcommand{\figVspaceBefore}{\vspace{-3mm}}
\newcommand{\figVspaceAfter}{\vspace{-3mm}}
\topsep 0in \itemsep 0in         % No extra space in itemized lists
\setlength{\tabcolsep}{1.5mm}      % squeeze table columns

\hyphenation{micro-arch-itecture}
\hyphenation{micro-arch-itectur-al}
%\renewcommand{\baselinestretch}{0.9}
\lstset{language=Python,captionpos=b,caption={ConfigParser format snippet},label=DescriptiveLabel}

\begin{document}

\title{NoCVision - A Network-on-Chip \\ Dynamic Visualization Solution\\\vspace{-4mm}}
\makeatletter
\def\@copyrightspace{\relax}
\makeatother
%\vspace{-4mm}
%\author{\IEEEauthorblockN{Michael Shell}
%\IEEEauthorblockA{School of Electrical and\\Computer Engineering\\
%Georgia Institute of Technology\\
%Atlanta, Georgia 30332--0250\\
%Email: http://www.michaelshell.org/contact.html}
%\and
%\IEEEauthorblockN{Homer Simpson}
%\IEEEauthorblockA{Twentieth Century Fox\\
%Springfield, USA\\
%Email: homer@thesimpsons.com}
%\and
%\IEEEauthorblockN{James Kirk\\ and Montgomery Scott}
%\IEEEauthorblockA{Starfleet Academy\\
%San Francisco, California 96678-2391\\
%Telephone: (800) 555--1212\\
%Fax: (888) 555--1212}}

%\vspace{4mm}
\maketitle

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Checkout the effects of power and clock gating on reliability
%http://cdnc.itec.kit.edu/downloads/Papers/Oboril12DSN.pdf



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\category{C.1.2}{PROCESSOR ARCHITECTURES}{Multiprocessors}[Interconnection Architectures]
%\ccsdesc[500]{Hardware~Interconnect power issues}
%\terms{Design,Algorithms}
%\keywords{network-on-chip, power-gating, routing-reconfiguration}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{abstract}
\vspace{6mm}
\end{abstract}

\section{Introduction}\label{sec:framework}
Networks-on-chips (NoCs) are increasingly being deployed in modern systems-on-chip (SoCs) and chip-multiprocessors (CMPs) for integrating and facilitating communication between cores, memories, and application-specific components. 
The complexity of these NoC designs is also on the rise, to cater to the communication requirements of these highly parallel architectures. 
During the development of these systems, extensive effort is invested on running simulations for the purpose of design exploration and evaluation of the performance and verification of the NoC design.
However, the systems integrating hundreds of heterogeneous components lead to an large number of distinct scenarios to be evaluated in the interconnects.
As a result, simulations span billions of clock cycles generating a vast amount of potential data to be analyzed.
To continue to support a growing design complexity of these systems, novel solutions are required to enable a faster, more flexible, and intuitive approach to analyze and consolidate the data collected during simulation, verification or post-silicon tuning.

In this work, we present NoCVision - a tool that aids in efficiently analyzing NoC traffic activity. 
The tool synthesizes the traffic data gathered in simulaton, whether with an architectural, a RTL or a post-silicon simulator, and presents it through intuitive diagrams. This allows designers to quickly understand and analyze the behavior of the NoC under evaluation.
With reference to Figure \ref{fig:nv_flow}, NoCVision takes in input log data gathered in simulation, parse it to extract the relevant information, and visualizes user-selected \textit{metrics} in its graphic user interface.
Data can be plotted and charted using a range of formats. It can be coalesced to coarse time window granularities, or in fine-grained time steps.
NoCVision is capable of visualizing any metric defined by the user, and that can be associated with either links or routers or virtual channels in the network.
It thus provides a platform for design-space exploration, optimization, verification, and performance and power tuning of NoC designs. 
The novel {\bf contributions} of our solution are:

\noindent $\bullet$ A network-visualization tool that allows to analyze and present traffic metrics through intuitive charts and plots. NoCVision analyzes data from network model's simulations and presents it to the user through a rich and flexible visual interface.

\noindent $\bullet$ Our tool is applicable to a wide variety of NoC simulation frameworks, as it can be set up to report on any user-set network metric that can be mapped to links, routers or virtual channels.

\noindent $\bullet$ NoCVision allows a user to move forward and backwards in time in visualizing the relevant network metrics, at any level of granularity. This feature enables users to animate sequnces of snapshots and appreciate activity over time.

\begin{figure}[t]
  \centering
  \includegraphics[angle=0,width=1\linewidth]{flow}
  \caption{
      {\bf NoCVision analysis flow.} Data generated from NoC simulations or design frameworks is processed by NoCVision, which condenses it, extracting relevant metrics, and presents it through intuitive diagrams and plots. NoCVision enables NoC's design-space exploration, functional validation and performance evaluation.}
  \label{fig:nv_flow}
  \vspace{-4mm}
\end{figure}



\section{Related Work}\label{sec:framework}
Many previous research efforts have focused on simulating the network under different traffic scenarios. NoC simulators such as Booksim \cite{booksim}, SICOSYS \cite{sicosys}, Noxim \cite{noxim} and Garnet \cite{garnet} provide flexible network infrastructure and are widely used by researchers today in exploring and analyzing various network components. While these simulators provide a framework for logging simulation data, no framework has been provided to analyze the data efficiently to date. Existing simulators are capable of recording the traffic information in the form of output log but the compilation of relevant data is still not possible. Moreover, it is not feasible to extract relevant information from the data logged by these simulators due to increased simulation duration and log size. Similarly, Netrace \cite{netrace} provides a capability to collect the trace of traffic and log dependencies in simulations but has no ability to analyze the traffic in NoC. 

While there is a much prior research in the area of NoC simulators, there exist only a few solutions that specifically aid in analyzing NoC designs. Noceve \cite{noceve} is one such tool that monitors NoC traffic on FPGA platforms. It can be used for analysis and debug of applications running on the SoC prototype designs on FPGA, and has been designed to run on EVE Zebu-Server FPGA \cite{zebu_server}.  However, Noceve does not take into consideration the applications running on NoC simulators and hence cannot be used for analysis of traffic flow in modern NoC simulators. MAIA \cite{maia} is yet another simulator that generates NoC from parameterizable templates, simulates the traffic, and analyzes the reports generated from the simulations. The traffic logs provide traffic information such as number of packets received and average packet delivery time for design analysis. On the other hand, we propose a solution that helps better understand such reports by consolidating and displaying the logged data graphically. Similar work has also been pursued for off-chip networks with Nam \cite{nam} being one such tool used for displaying animation of packets in real-network traces. However, no such comprehensive tool has been built for on-chip network analysis and to the best of our knowledge, NoCVision is the first stand-alone solution that can aid in analysis of on-chip traffic by displaying logged data graphically.


\section{NoCVision overview}\label{sec:framework}
NoCVision is a tool that aids in analysis of NoC designs. It inputs logs generated by design simulations and provides interactive controls to analyze the behavior of NoC designs better.  It can be used to analyze various network properties such as link congestion, router buffer utilization, power state, and packet traversals. NoCVision can represent these properties in the form of plots to demonstrate their behavior for an entire duration of simulation. In addition, it can compare a variety of aspects of the network detailed for finer components, specifically, routers, links, and virtual channels. It does so by plotting properties using varied color intensities similar to heat map for a fixed period of time called an \textit{interval}. For instance, while plotting router utilization, heavily utilized routers are represented with the colors contrasting those that are sparsely utilized. It also enables plotting of specific `interesting' incidents called \textit{events} occurring during the simulation so that they can be distiguished and contrasted from the other regions in the network. Thus, it aids in the analysis of logged data at different granularites of clock cycles ranging from entire simulation duration to specific incidents. 


NoCVision is oblivious to the meaning of the network property that is being plotted. As a result, it can plot any such property as long as it can be associated to routers, links, or virtual channels. In other words, NoCVision enables the analysis of a wide range of data that can be logged from NoC simulators. 

The modeled design is evaluated with synthetic workloads or commercial benchmark suites. The data is then logged either from the simulator directly in a standardized log file or through post-processing using scripts in a format that can be read by NoCVision. NoCVision can then be setup to represent data in a desired form.




%\begin{figure}[t]
%  \centering
%  \includegraphics[angle=0,width=0.9\linewidth]{nv_framework}
%  \caption{
%      {\bf NoCVision overview} NoCVision can be configured to run in one of the three modes: plot, interval or event to generate graphs to enable analysis of NoC parameters.
%  }
%  \label{fig:nv_framework}
%  \vspace{-4mm}
%\end{figure}


\section{Components of NoCVision}\label{sec:architecture}
NoCVision interprets the log file generated from the simulation and classifies the properties to be analyzed as \textit{parameters}. A parameter is uniquely used to identify the type of data being logged during the simulation. Depending on the type of analysis to be performed, it can operate in one of three different modes: interval, plot, and event modes detailed later in section \ref{sec:modes}. 
Plot mode aids in plotting of multiple parameters simultaneously on a graph with respect to the simulation time. It can plot difference between parameters to facilitate comparative analysis between them. On the other hand, interval mode plots a parameter for a fixed window of time interval in the form of the network components represented, using varying color intensity. In interval mode, NoCVision helps in highlighting anomalous regions in the network and exploring them in greater detail at finer interval sizes. Once the region and period of interest is determined, event mode can expose the areas where an anomaly is triggered; this enables analysis of data at a finest granularity of a clock cycle. 

\subsection{NoCVision Framework}\label{sec:framework}
NoCVision is implemented in Python and uses its built-in GUI library \textit{tkinter} to display the animation of packet flow graphically. Various controls in the NoCVision GUI are built and functionalities are assigned to them using the standard tkinter classes. Depending on the mode in which the tool is configured, python functions enable the controls specific to that particular mode. NoCVision uses the tkinter canvas widget to plot graphs and the button widget to enable controls on the GUI. The controls are also provided in the GUI to navigate through the data and fast-forward to increase the playback rate. Event bindings are used to bind the functionalities to the widgets or items in the canvas. The exit button is present in all the frames of the tool to terminate the application at any time. 

\subsection{Configuration file}\label{sec:config_file}
An input file to the NoCVision specifies the network configuration along with the data logged from the simulation. The options to configure the network \ie network size, topology, dimension, and number of virtual channels are specified in the input file and they define the network characteristics for which the simulation data has been logged. As shown in Figure \ref{fig:ConfigParser} (line 2), network \textit{topology}, dimension \textit{k}, number of nodes in a dimension \textit{n}, and number of virtual channels \textit{num\_vcs} are defined in the input file. A network is configured for a 4-ary 2-cube mesh topology with 16 virtual channels in Figure \ref{fig:config_ex} (line 1-4). Currently, NoCVision supports network with 2-dimensional mesh and torus topologies. 

In interval and plot mode, simulation data is logged for fixed interval of clock cycles. An interval is defined using a header and multiple parameters are specified within a header as illustrated in Figure \ref{fig:ConfigParser} (line 4-6); parameters within a header are valid for an interval defined by that header. For instance, as shown in Figure \ref{fig:config_ex} (line 5-8), a parameter avg\_latency is 43.3 during an interval of 0-100 clock cycles and increases to 56.2 in the subsequent interval of 100-200 clock cycles.

In an event mode, individual events are specified logging the clock cycles and network components for which they are enabled. An event is not specified in a format defined for interval and plot mode due to the absence of fixed clock intervals. Each event specifies the id and type, clock cycle at which it is enabled, and network component where it is triggered as shown in Figure \ref{fig:ConfigParser} (line 7-9). An event logged in Figure \ref{fig:config_ex} (line 9) has an id 3 and is triggered in the north link of router 2 at a clock 143. Although intervals and events can co-exist in the input file, they can be viewed exclusively in the mode in which NoCVision is setup. \newline

\vspace{-4mm}
\begin{figure}[hbtp]
%\rule{\linewidth}{0.4pt}
\begin{algorithm}[H]
\captionof{figure}[ConfigParser]{Configuration file syntax}
\begin{algorithmic}[1]
%\vspace{-3mm}
\State NoCVisionConfig $\rightarrow$ NetworkConfig DataLog$^{+}$
\State NetworkConfig $\rightarrow$ topology k n num\_vcs
\State DataLog $\rightarrow$ IntervalLog $|$ EventLog
\State IntervalLog $\rightarrow$ IntervalHeader IntervalParameter$^{+}$
\State IntervalHeader $\rightarrow$ \textit{[clock = }integer\textit{]}
\State IntervalParameter $\rightarrow$ \textit{parameterName =} integer $|$ float $|$ array
\State EventLog $\rightarrow$ \textit{clock}:\textit{eventId}:EventType:EventLocation
\State EventType $\rightarrow$ \textit{trace} $|$ \textit{pin} $|$ \textit{unpin}
\State EventLocation $\rightarrow$ \textit{node} $|$ \textit{node}:\textit{link} $|$ \textit{node}:\textit{link}:\textit{vc}
\end{algorithmic}
\label{fig:ConfigParser}
\end{algorithm}
%\vspace{-11mm}
%\rule{\linewidth}{0.4pt}
\vspace{-4mm}
%\caption{\textbf{NoCVision configuration syntax}}
\end{figure}

\begin{algorithm}
    \captionof{figure}[ConfigParser]{Example configuration file}
    \begin{algorithmic}[1]
%            \Statex $\textit{//network configuration}$
            \State $topology = mesh$
            \State $k = 2$
            \State $n = 4$
            \State $num\_vcs = 16$
%	    \newline
%            \Statex $\textit{//clock interval 0-100}$
            \State $[clock = 100]$
            \State $avg\_latency = 43.3$
%	    \newline
%            \Statex $\textit{//clock interval 100-200}$
            \State $[clock = 200]$
            \State $avg\_latency = 56.2$
%	    \newline
%            \Statex $\textit{//event format}$
            \State $clock\_143:trace:id\_2:node\_2:link\_0$
    \end{algorithmic}
  \label{fig:config_ex}
\end{algorithm}


\subsection{Graphical user interface}\label{sec:gui}
The GUI displaying the animation of traffic in the network is interactive and can display a variety of properties of the network \ie
(i) values of parameters in links and routers during an interval of simulation, 
(ii) plot of the parameter in a network component for an entire simulation, 
(iii) traffic details in the virtual channels of a link, 
(iv) color bar to display range of values in the interval, and 
(v) capability to skip, combine or fast-forward through the events or intervals. Once the configuration file is generated from a simulation, NoCVision is invoked with it as an input. NoCVision parses through the file to identify the modes for which the data is provided and queries the user for the desired mode. On selecting the mode, the user can select the options for the analysis such as parameters to be plotted, granularity of clock interval, \etc as shown in Figure \ref{fig:layout}. NoCVision generates the representation of layout based on the selected mode and options and presents the data on the Python tkinter canvas. Data is presented in the form of plots in the plot mode while different color intensities are used to differentiate between the data points in case of interval and event modes. The user can control the playback rate of data parsing by using the control buttons provided on the user interface. The components on the network representation on the canvas are also interactive and an be clicked to view the parameter value at that timestamp or its behavior over entire duration of simulation in the form of plot as shown in Figure \ref{fig:layout}. Also, controls are provided to restart the analysis and provide new set of parameters and options. 

\begin{figure}[t]
  \centering
  \includegraphics[angle=0,width=1\linewidth]{layout}
  \caption{
      {\bf NoCVision layout} A parameter and simulation options are selected followed by the analysis of data on an interactive interface. Controls are provided to enable playback through the intervals.
  }
  \label{fig:layout}
  \vspace{-4mm}
\end{figure}


\section{Modes of operation}\label{sec:modes}
NoCVision operates in one of the three modes depending on the type of data to be analyzed. NoCVision, through these modes, allows users to observe network at various time granularities. This enables the user to incrementally collect data at incrementally smaller time windows and deduce the cause of the issue at the finest granularity of the clock interval for which the data is logged. NoCVision can operate in one of the following modes:

\subsection{Interval mode}\label{sec:interval}
%Once the area of interest in determined using the plotting mode, user can use interval mode to view data across intervals in the network. 
Interval mode aids in the visualization of packet flow across several clock intervals. The data obtained as a result of running benchmarks in network simulator is logged at fixed regular intervals in a log file. Several network parameters can be logged per interval and each parameter can represent a set of data associated with a router, link, or virtual channel. NoCVision infers the type of parameter depending on the size of array it is assigned as shown in Table \ref{tab:interval_syntax}. For instance, in a 3x3 mesh network, a parameter associated to a link is assigned to an array of size 4x9 as there are nine routers in the network and each router has a link in each of the four directions. Moreover, local link can also be enabled and is mapped to the router when it is displayed in the network graph. Parameters associated to different network components can also be logged simultaneously within the interval headers.

\begin{table}[h]
\centering
\normalsize
\begin{tabular}{|p{2cm}|p{6cm}|}
\hline
{\bf Network component} & {\bf Syntax} \\
\hline
 Router & [number of routers in a network]\\ \hline
 Link & [[number of links per router] x number of routers in a network]\\ \hline           
 Virtual Channel & [[[number of VCs per port] x number of links per router] x number of routers in a network]\\ \hline           
\end{tabular}
\caption{ {\bf Interval mode parameter syntax}}

\label{tab:interval_syntax}
%\vspace{-4mm}
\end{table}


NoCVision GUI allows user to skip the intervals to analyze data at a coarser granularity and start from an interval in the simulation. While skipping through the intervals, user can specify the property of the parameter so that the effective data can be calculated across skipped intervals. The properties namely 
(i) \lq accumulate\rq\ in which data is summed for the skipped intervals, 
(ii) \lq maximum\rq\ for which highest of the skipped values is plotted, 
(iii) \lq minimum\rq\ which plots least of the skipped values, and
(iv) \lq average\rq\ that computes average of skipped values can be used to define a parameter. This is specifically useful while plotting parameters such as average buffer utilization and maximum packet latency in a router for which it is not meaningful to aggregate the values while skipping intervals. 
Once the parameter is chosen and property is selected, NoCVision displays the parameter values starting with the interval specified by the user. NoCVision uses color intensity to display relative values of a parameter in the network and a color bar is used to specify the range of data being displayed as shown in Figure \ref{fig:layout}. The color intensities vary from \textit{blue} for smaller values to \textit{red} for larger values of a parameter. GUI provides an interactive interface allowing user to click on any component to get value of the parameter during that interval or a graph for an entire simulation, parse forward or backwards through the intervals, fast-forward through the intervals to reach region of interest faster or reset to plot a different set of parameter. 

%\begin{figure}[b]
%  \centering
%  \includegraphics[angle=0,width=1\linewidth]{interval_mode}
%  \caption{
%      {\bf Interval mode} NoCVision displays parameter values using color intensity with color bar indicating the range of values for current interval. Parameter can also be plotted for an entire simulation.
%  }
%  \label{fig:interval_mode}
%%  \vspace{-4mm}
%\end{figure}


\subsection{Plot mode}\label{sec:plot}
In plot mode, NoCVision plots a parameter for different network components and enables comparison between them by either plotting them simultaneously or by plotting a difference between them on a graph.
NoCVision can plot network simulation properties such as average network throughput or parameter values for network components - links and routers logged for every interval. These parameters are logged in a format similar to the interval mode and NoCVision can plot up to three of these parameters each being associated to a link, router, and network.
On selecting a set of parameters to plot, the network components to be plotted concurrently are chosen as shown in Figure \ref{fig:plot_mode_layout}. Plots for these components are then drawn on a graph and identified using distinct colors also provided in the legend.
These plots provide a high-level understanding of the variations in the values of network parameters during a span of a simulation. Moreover, a part of a simulation can also be carved out and analyzed as controls enabling zoom-in and zoom-out options along \textit{X} and \textit{Y} axes of a plot are provided on the GUI. The GUI also maintains other options to adjst borders along the plot, cursor to determine the plot value, and option to save a plot in jpeg, png and other such popular formats.
In addition to plotting a single set of parameters, NoCVision can also enable a comparison between two parameter sets by computing and plotting a difference between them. This is possible by enabling the \textit{diff} option on a GUI and selecting an optional set of parameters as shown in Figure \ref{fig:plot_mode_layout}. 
In addition, NoCVision can also compare parameters from two different simulation logs and plot a difference between the two traces. These features enabling comparison between two sets of parameter or two different simulation logs altogether can be useful during a design-space exploration when multiple architectural options are being scrutinized.

%Moreover, multiple plots are distinguished using distinct colors and marked using a legend.
%While simplest way to compare parameters is to subtract the traces in time domain, traces can be phase shifted and it might become difficult to gain relevant information from the plot obtained from difference between the two traces.
%Hence, NoCVision also supports trace alignment feature originally explained in \cite{trace_align} so that phases can be aligned before the traces are compared. 
%As shown in Fig 3, plotting mode can be used to obtain traces of parameter values in the components, network throughput or latency graphs or comparison of the traces from two network configurations.
\begin{figure}[t]
  \centering
  \includegraphics[angle=0,width=1\linewidth]{plot_mode_layout}
  \caption{
      {\bf Plot mode} A layout of options presented by NoCVision when it is setup in plot mode. 
  }
  \label{fig:plot_mode_layout}
%  \vspace{-4mm}
\end{figure}

\subsection{Event mode}\label{event_mode_sec}
Event mode aids in the visualization of discrete events occurring in the simulation; an event being a binary incident in a router, link, or virtual channel having on-off phases. An event can be termed as \textit{on} when a parameter under analysis crosses a certain user-defined threshold during the simulation and is disabled later once it is within the threshold. Multiple such event manifesting in the different network components can logged in the configuration file for the duration they are active. A logged event describes the clock at which the event was triggered and location in the network where it manifested. Note that, such events can be active for any number of clock cycles and be irregularly dispersed in the simulation. NoCVision maps these events on the network graph and displays the status of the network at the occurrence of each event. Multiple events can be select so that network can be viewed after the trigger of each event. An event is determined using a distinct event id; NoCVision GUI uses colors to distinguish between the events while mapping the events on network graph. Depending on the duration of activation of an event, NoCVision defines an event as an instantaneous or a window event. An instantaneous event is activated for a clock cycle at which it is logged and disabled in the following clock cycle. Window events on the other hand have to be explicitly deactivated later in the simulation after they are activated. This eliminates the need to log the window events at every clock cycles they are active thereby reducing the size of logged data. These two types of events can  co-exist in the configuration file and provide added flexibility in logging the events. 


One such example of event mode is shown in Figure \ref{fig:event_mode} which plots an event describing congestion in the routers represented using the color \textit{red}. The routers in which congestion crosses a threshold are activated at a clock cycle as shown in event 1 and later disabled to deactivate the event in active routers. For instance, routers 2, 3, and 4 which are earlier disabled in event 1 get congested and thus activated in event 2. As the events progress, routers 13 and 14 get freed and hence deactivated for subsequent events.

\begin{figure}
  \centering
  \includegraphics[angle=0,width=1\linewidth]{event_mode_1}
  \caption{
      {\bf Router congestion event}: An event is activated when the congestion in the router crosses a threshold and represented with a color \textit{red} by NoCVision. Once the congestion subsides within the threshold, event is deactivated and color of the router changes back to \textit{white}.
  }
  \label{fig:event_mode}
%  \vspace{-4mm}
\end{figure}






\section{Experiments}
\begin{itemize}
\item Experiments showcasing usage of each of the three modes. 
\end{itemize}


\section{Conclusion}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\bibliographystyle{IEEEtran}
\bibliographystyle{IEEEtranS}
\begin{scriptsize}
  \bibliography{pleiades}
\end{scriptsize}
\end{document}
